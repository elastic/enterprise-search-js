/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable @typescript-eslint/no-empty-interface */

// This file was automatically generated by elastic/elastic-client-generator-js
// DO NOT MODIFY IT BY HAND. Instead, modify the source open api file,
// and elastic/elastic-client-generator-js to regenerate this file again.

export interface LogClickthroughRequest {
  /**
   * Name of the engine
   */
  engine_name: string
  body?: {
    query: string
    request_id?: string
    document_id: string
    tags?: string[]
  }
}

export type LogClickthroughResponse = Record<string, unknown>

export interface QuerySuggestionRequest {
  /**
   * Name of the engine
   */
  engine_name: string
  body?: {
    query?: string
    types?: {
      documents?: {
        fields?: string[]
        [k: string]: unknown
      }
      [k: string]: unknown
    }
    size?: number
  }
}

export interface QuerySuggestionResponse {
  results?: {
    documents?: Array<{
      suggestion?: string
    }>
    [k: string]: unknown
  }
  meta?: {}
}

export interface SearchRequest {
  /**
   * Name of the engine
   */
  engine_name: string
  body?: {
    query: string
    analytics?: {}
    boost?: {}
    facets?: {}
    filters?: {}
    group?: {}
    page?: {
      current?: number
      size?: number
    }
    result_fields?: {}
    search_fields?: {
      [k: string]: {
        weight?: number
      }
    }
    sort?: Array<{
      [k: string]:
      | ('asc' | 'desc')
      | {
        center?:
        | string
        | Array<{
          [k: string]: unknown
        }>
        order?: 'asc' | 'desc'
        mode?: 'min' | 'max' | 'median' | 'avg'
      }
    }>
  }
}

export interface SearchResponse {
  meta: {
    page: {
      current: number
      total_pages: number
      total_results: number
      size: number
    }
  } & {
    alerts: string[]
    warnings: string[]
    precision?: number
    engine: {
      name?: string
      /**
       * Engine type
       */
      type?: 'meta' | 'default'
    }
    request_id?: string
  }
  results: Array<{}>
}
